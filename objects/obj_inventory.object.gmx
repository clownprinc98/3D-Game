<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x1 = room_width/8;
x2 = room_width - room_width/8;

y1 = room_height/8;
y2 = room_height - room_height/8;



xSize = (x2-x1)/(INVW);
ySize = (y2-y1)/(INVH);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var itemCount =  ds_map_find_value(INV, itemLocation[mouseGridPos])
switch string(itemLocation[mouseGridPos]){

    case "Jpotion":
        ds_map_replace(INV, itemLocation[mouseGridPos],itemCount-1);
        if(ds_map_find_value(INV, itemLocation[mouseGridPos]) &lt;= 0){
            ds_map_delete(INV, itemLocation[mouseGridPos]);
        }
        audio_play_sound(choose(snd_glug, snd_slurp), 1,0);
        with(obj_player)
        event_perform_object(obj_player, ev_other,ev_user0);
    break;
    
    case "Madpotion":
        ds_map_replace(INV, itemLocation[mouseGridPos],itemCount-1);
        if(ds_map_find_value(INV, itemLocation[mouseGridPos]) &lt;= 0){
            ds_map_delete(INV, itemLocation[mouseGridPos]);
        }
        audio_play_sound(choose(snd_glug, snd_slurp), 1,0);
        obj_player.madPotionActive = true;
    break;
    
    case "Spotion":
        ds_map_replace(INV, itemLocation[mouseGridPos],itemCount-1);
        if(ds_map_find_value(INV, itemLocation[mouseGridPos]) &lt;= 0){
            ds_map_delete(INV, itemLocation[mouseGridPos]);
        }
        audio_play_sound(choose(snd_glug, snd_slurp), 1,0);
        obj_player.mSpeed *= 2;
        obj_player.fastWalk = 1;
    break;
    
    case "Hpotion":
        
    break
    
    case "money":
        audio_play_sound(snd_wilba,1,0);
    break;

    case "0":break;

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>d3d_set_projection_ortho(0,0,room_width,room_height,0);
d3d_set_lighting(false);
d3d_set_hidden(false);


var alpha = draw_get_alpha();
var colour = draw_get_colour();
    
    draw_set_alpha(0.8);
    draw_set_colour(c_black);
    draw_rectangle(0,0,room_width, room_height, 0)
    draw_set_alpha(1);
    draw_set_colour(c_gray);
    draw_rectangle(x1,y1,x2,y2, 0);
    

    var xPos = x1;
    var yPos = y1;
    
    var i = 0;
    var item;
    var itemSpr;
    var numItems = ds_map_size(INV);
    if(i &lt; numItems){
        item = ds_map_find_first(INV);
        itemSpr = get_sprite_from_item(item);
    }
    while(yPos &lt; y2){
        draw_set_colour(c_black);
        draw_rectangle(xPos, yPos, xPos + xSize, yPos + ySize, 1);
        draw_set_colour(c_white);
        if(i != 0){
            item = ds_map_find_next(INV, item);
            itemSpr = get_sprite_from_item(item);
        }
        
        var spriteXScale = (xSize) / sprite_get_width(itemSpr);
        var spriteYScale = (ySize) / sprite_get_height(itemSpr);
        
        draw_sprite_ext(itemSpr, image_index, xPos, yPos, spriteXScale, spriteYScale,0,c_white, 1);
        if(string(ds_map_find_value(INV, item)) != "0"){
            draw_set_halign(fa_left);
            draw_text(xPos, yPos, ds_map_find_value(INV, item));
        }
        
        itemLocation[i] = item;
        i++;
        xPos += xSize;
        if(xPos &gt;= x2){
            xPos = x1;
            yPos += ySize;
        }
    }
    
    if(mouse_x &gt; x1 and mouse_x &lt; x2 and mouse_y &gt; y1 and mouse_y &lt; y2){
        // get the box the mouse is looking at and highlight it.
        // first find the left bound of the closest box. Then highlight to lBound + xSize;
        // then find the upper bound of the closest box, then highlight to uBound + ySize;
        // need to set mouse origin to be 0,0 at top left of inventory.
        var mouseX = mouse_x - x1;
        var mouseY = mouse_y - y1;
        var lBound = floor(mouseX/xSize) * xSize;
        var uBound = floor(mouseY/ySize) * ySize;
        
        mouseGridPos = lBound/xSize + (uBound/ySize)*INVW;
        draw_set_halign(fa_middle);
        draw_set_alpha(0.25);
        draw_set_colour(c_white);
        draw_rectangle(x1+lBound, y1+uBound, x1+ lBound + xSize, y1 + uBound + ySize, 0);
        draw_set_alpha(1);
        
        draw_text(room_width/2, y1, get_item_name(itemLocation[mouseGridPos]));
    }
    
    

d3d_set_hidden(true);
draw_set_colour(colour);
draw_set_alpha(alpha);
d3d_set_lighting(true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
