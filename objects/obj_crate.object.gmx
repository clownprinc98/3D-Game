<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>parent_interactable</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alarm[0] = 1;
WDX = 0;
WDY = 0;
type = "solid";
w = 0;
l = 0;
z = 0;
h = 0;

zOld = z;
xOld = x;
yOld = y;

floorHeight = -1;
zspeed = 0;
zspeedTo = 0;

zdir = 0;
xdir = 0;
ydir = 0;
mass = 1;

idIndex = -1;

held = 0;
heldBy = noone;

initialised = false;
mSpeed = 0.25*mass;
var t = choose(tex_01, tex_02, tex_03, tex_04, tex_05);
text = background_get_texture(t);

col_model = p3dc_begin_model();
    p3dc_add_block(-l,-w,z,l,w,h);
p3dc_end_model();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>p3dc_clear_model(col_model);

col_model = p3dc_begin_model();
    p3dc_add_block(-l,-w,z,l,w,z+h);
p3dc_end_model();

initialised = true;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(initialised and !PAUSED){

    if(held){
        x = heldBy.x + heldBy.walkDirX;
        y = heldBy.y + heldBy.walkDirY;
        z = heldBy.z + (heldBy.height/2)
    }
    else{
        if(xOld != x or yOld != y or zOld != z){
            xOld = x;
            yOld = y;
            zOld = z;
            p3dc_clear_model(col_model);
            col_model = p3dc_begin_model();
                p3dc_add_block(-l,-w,-h,l,w,0);
            p3dc_end_model();
        }
        z += zspeed;
        if (z &gt; floorHeight){
            zspeed -= 0.25*mass;
        }else if (z &lt; floorHeight){
            z = floorHeight;
        }else{
            zspeed = 0;
        }
        
        if(speed &gt; 0){
            speed -= 0.4025*mass;
        }
        else{
            speed = 0;
        }
        if(z &lt; 0){
            z = floorHeight;
        }
        
        
        
        
        
        // check under self.
        if(p3dc_check_still(col_model,x,y,z-abs(zspeed),world_col) == true){
            floorHeight = z;
            if(speed &gt;0) speed -= 0.25;
        }
        else{
            floorHeight = -1; // keep falling until we find jesus or the floor.
        }
            
        
        for(var i = 0; i &lt; array_length_1d(OBJECT); i++){
            var obj = OBJECT[i]
            if(self.id != OBJECT[i]){
                // first check under self
                if(p3dc_check(col_model,x,y, z-abs(zspeed), obj.col_model, obj.x,obj.y,obj.z+obj.h)){
                    if(obj.type == "solid" and obj.initialised){
                        floorHeight = obj.z+obj.h;
                        zspeed = 0;
                    }
                }
                
                // collide with other blovks.
                if(p3dc_check(col_model,x,y, z+(h/2), obj.col_model, obj.x,obj.y,obj.z+(obj.h/2))){
                    x=xprevious;
                    y=yprevious;
                    obj_player.x -= WDX;
                    obj_player.y -= WDY;
                }
                
            }
        }
        
        // collide with world.
        // check in front of self at head and then floor
        if(p3dc_check_still(col_model,x,y,z+h, world_col) == true){
            x=xprevious;
            y=yprevious;
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="52">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>z += 1;
floorHeight = z;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(initialised){
    d3d_draw_block(x-l,y-w,z-h, x+l,y+w, z+h, text,1,1);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
